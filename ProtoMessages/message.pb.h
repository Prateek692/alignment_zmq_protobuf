// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class Coordinates;
class CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Coordinates_Coordinate;
class Coordinates_CoordinateDefaultTypeInternal;
extern Coordinates_CoordinateDefaultTypeInternal _Coordinates_Coordinate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Coordinates* Arena::CreateMaybeMessage<::Coordinates>(Arena*);
template<> ::Coordinates_Coordinate* Arena::CreateMaybeMessage<::Coordinates_Coordinate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Coordinates_Coordinate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Coordinates.Coordinate) */ {
 public:
  Coordinates_Coordinate();
  virtual ~Coordinates_Coordinate();

  Coordinates_Coordinate(const Coordinates_Coordinate& from);
  Coordinates_Coordinate(Coordinates_Coordinate&& from) noexcept
    : Coordinates_Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinates_Coordinate& operator=(const Coordinates_Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates_Coordinate& operator=(Coordinates_Coordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates_Coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinates_Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinates_Coordinate*>(
               &_Coordinates_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates_Coordinate& a, Coordinates_Coordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates_Coordinate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates_Coordinate* New() const final {
    return CreateMaybeMessage<Coordinates_Coordinate>(nullptr);
  }

  Coordinates_Coordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates_Coordinate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates_Coordinate& from);
  void MergeFrom(const Coordinates_Coordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates_Coordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Coordinates.Coordinate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Coordinates.Coordinate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Coordinates :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Coordinates) */ {
 public:
  Coordinates();
  virtual ~Coordinates();

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates* New() const final {
    return CreateMaybeMessage<Coordinates>(nullptr);
  }

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates& from);
  void MergeFrom(const Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Coordinates";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Coordinates_Coordinate Coordinate;

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
    kLaserTypeFieldNumber = 2,
  };
  // repeated .Coordinates.Coordinate unit = 1;
  int unit_size() const;
  private:
  int _internal_unit_size() const;
  public:
  void clear_unit();
  ::Coordinates_Coordinate* mutable_unit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Coordinates_Coordinate >*
      mutable_unit();
  private:
  const ::Coordinates_Coordinate& _internal_unit(int index) const;
  ::Coordinates_Coordinate* _internal_add_unit();
  public:
  const ::Coordinates_Coordinate& unit(int index) const;
  ::Coordinates_Coordinate* add_unit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Coordinates_Coordinate >&
      unit() const;

  // string Laser_type = 2;
  void clear_laser_type();
  const std::string& laser_type() const;
  void set_laser_type(const std::string& value);
  void set_laser_type(std::string&& value);
  void set_laser_type(const char* value);
  void set_laser_type(const char* value, size_t size);
  std::string* mutable_laser_type();
  std::string* release_laser_type();
  void set_allocated_laser_type(std::string* laser_type);
  private:
  const std::string& _internal_laser_type() const;
  void _internal_set_laser_type(const std::string& value);
  std::string* _internal_mutable_laser_type();
  public:

  // @@protoc_insertion_point(class_scope:Coordinates)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Coordinates_Coordinate > unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr laser_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates_Coordinate

// repeated double values = 1;
inline int Coordinates_Coordinate::_internal_values_size() const {
  return values_.size();
}
inline int Coordinates_Coordinate::values_size() const {
  return _internal_values_size();
}
inline void Coordinates_Coordinate::clear_values() {
  values_.Clear();
}
inline double Coordinates_Coordinate::_internal_values(int index) const {
  return values_.Get(index);
}
inline double Coordinates_Coordinate::values(int index) const {
  // @@protoc_insertion_point(field_get:Coordinates.Coordinate.values)
  return _internal_values(index);
}
inline void Coordinates_Coordinate::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Coordinates.Coordinate.values)
}
inline void Coordinates_Coordinate::_internal_add_values(double value) {
  values_.Add(value);
}
inline void Coordinates_Coordinate::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Coordinates.Coordinate.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Coordinates_Coordinate::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Coordinates_Coordinate::values() const {
  // @@protoc_insertion_point(field_list:Coordinates.Coordinate.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Coordinates_Coordinate::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Coordinates_Coordinate::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Coordinates.Coordinate.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Coordinates

// repeated .Coordinates.Coordinate unit = 1;
inline int Coordinates::_internal_unit_size() const {
  return unit_.size();
}
inline int Coordinates::unit_size() const {
  return _internal_unit_size();
}
inline void Coordinates::clear_unit() {
  unit_.Clear();
}
inline ::Coordinates_Coordinate* Coordinates::mutable_unit(int index) {
  // @@protoc_insertion_point(field_mutable:Coordinates.unit)
  return unit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Coordinates_Coordinate >*
Coordinates::mutable_unit() {
  // @@protoc_insertion_point(field_mutable_list:Coordinates.unit)
  return &unit_;
}
inline const ::Coordinates_Coordinate& Coordinates::_internal_unit(int index) const {
  return unit_.Get(index);
}
inline const ::Coordinates_Coordinate& Coordinates::unit(int index) const {
  // @@protoc_insertion_point(field_get:Coordinates.unit)
  return _internal_unit(index);
}
inline ::Coordinates_Coordinate* Coordinates::_internal_add_unit() {
  return unit_.Add();
}
inline ::Coordinates_Coordinate* Coordinates::add_unit() {
  // @@protoc_insertion_point(field_add:Coordinates.unit)
  return _internal_add_unit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Coordinates_Coordinate >&
Coordinates::unit() const {
  // @@protoc_insertion_point(field_list:Coordinates.unit)
  return unit_;
}

// string Laser_type = 2;
inline void Coordinates::clear_laser_type() {
  laser_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Coordinates::laser_type() const {
  // @@protoc_insertion_point(field_get:Coordinates.Laser_type)
  return _internal_laser_type();
}
inline void Coordinates::set_laser_type(const std::string& value) {
  _internal_set_laser_type(value);
  // @@protoc_insertion_point(field_set:Coordinates.Laser_type)
}
inline std::string* Coordinates::mutable_laser_type() {
  // @@protoc_insertion_point(field_mutable:Coordinates.Laser_type)
  return _internal_mutable_laser_type();
}
inline const std::string& Coordinates::_internal_laser_type() const {
  return laser_type_.GetNoArena();
}
inline void Coordinates::_internal_set_laser_type(const std::string& value) {
  
  laser_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Coordinates::set_laser_type(std::string&& value) {
  
  laser_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Coordinates.Laser_type)
}
inline void Coordinates::set_laser_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  laser_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Coordinates.Laser_type)
}
inline void Coordinates::set_laser_type(const char* value, size_t size) {
  
  laser_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Coordinates.Laser_type)
}
inline std::string* Coordinates::_internal_mutable_laser_type() {
  
  return laser_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Coordinates::release_laser_type() {
  // @@protoc_insertion_point(field_release:Coordinates.Laser_type)
  
  return laser_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Coordinates::set_allocated_laser_type(std::string* laser_type) {
  if (laser_type != nullptr) {
    
  } else {
    
  }
  laser_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), laser_type);
  // @@protoc_insertion_point(field_set_allocated:Coordinates.Laser_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
