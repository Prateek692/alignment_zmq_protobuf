// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: new_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_new_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_new_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_new_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_new_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_new_5fmessage_2eproto;
class CoordinatesBytes;
class CoordinatesBytesDefaultTypeInternal;
extern CoordinatesBytesDefaultTypeInternal _CoordinatesBytes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CoordinatesBytes* Arena::CreateMaybeMessage<::CoordinatesBytes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CoordinatesBytes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CoordinatesBytes) */ {
 public:
  CoordinatesBytes();
  virtual ~CoordinatesBytes();

  CoordinatesBytes(const CoordinatesBytes& from);
  CoordinatesBytes(CoordinatesBytes&& from) noexcept
    : CoordinatesBytes() {
    *this = ::std::move(from);
  }

  inline CoordinatesBytes& operator=(const CoordinatesBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinatesBytes& operator=(CoordinatesBytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordinatesBytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordinatesBytes* internal_default_instance() {
    return reinterpret_cast<const CoordinatesBytes*>(
               &_CoordinatesBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CoordinatesBytes& a, CoordinatesBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinatesBytes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoordinatesBytes* New() const final {
    return CreateMaybeMessage<CoordinatesBytes>(nullptr);
  }

  CoordinatesBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordinatesBytes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordinatesBytes& from);
  void MergeFrom(const CoordinatesBytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinatesBytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CoordinatesBytes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_new_5fmessage_2eproto);
    return ::descriptor_table_new_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesDataFieldNumber = 1,
    kLaserTypeFieldNumber = 2,
  };
  // bytes coordinates_data = 1;
  void clear_coordinates_data();
  const std::string& coordinates_data() const;
  void set_coordinates_data(const std::string& value);
  void set_coordinates_data(std::string&& value);
  void set_coordinates_data(const char* value);
  void set_coordinates_data(const void* value, size_t size);
  std::string* mutable_coordinates_data();
  std::string* release_coordinates_data();
  void set_allocated_coordinates_data(std::string* coordinates_data);
  private:
  const std::string& _internal_coordinates_data() const;
  void _internal_set_coordinates_data(const std::string& value);
  std::string* _internal_mutable_coordinates_data();
  public:

  // string Laser_type = 2;
  void clear_laser_type();
  const std::string& laser_type() const;
  void set_laser_type(const std::string& value);
  void set_laser_type(std::string&& value);
  void set_laser_type(const char* value);
  void set_laser_type(const char* value, size_t size);
  std::string* mutable_laser_type();
  std::string* release_laser_type();
  void set_allocated_laser_type(std::string* laser_type);
  private:
  const std::string& _internal_laser_type() const;
  void _internal_set_laser_type(const std::string& value);
  std::string* _internal_mutable_laser_type();
  public:

  // @@protoc_insertion_point(class_scope:CoordinatesBytes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinates_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr laser_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_new_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CoordinatesBytes

// bytes coordinates_data = 1;
inline void CoordinatesBytes::clear_coordinates_data() {
  coordinates_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CoordinatesBytes::coordinates_data() const {
  // @@protoc_insertion_point(field_get:CoordinatesBytes.coordinates_data)
  return _internal_coordinates_data();
}
inline void CoordinatesBytes::set_coordinates_data(const std::string& value) {
  _internal_set_coordinates_data(value);
  // @@protoc_insertion_point(field_set:CoordinatesBytes.coordinates_data)
}
inline std::string* CoordinatesBytes::mutable_coordinates_data() {
  // @@protoc_insertion_point(field_mutable:CoordinatesBytes.coordinates_data)
  return _internal_mutable_coordinates_data();
}
inline const std::string& CoordinatesBytes::_internal_coordinates_data() const {
  return coordinates_data_.GetNoArena();
}
inline void CoordinatesBytes::_internal_set_coordinates_data(const std::string& value) {
  
  coordinates_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CoordinatesBytes::set_coordinates_data(std::string&& value) {
  
  coordinates_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoordinatesBytes.coordinates_data)
}
inline void CoordinatesBytes::set_coordinates_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coordinates_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoordinatesBytes.coordinates_data)
}
inline void CoordinatesBytes::set_coordinates_data(const void* value, size_t size) {
  
  coordinates_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoordinatesBytes.coordinates_data)
}
inline std::string* CoordinatesBytes::_internal_mutable_coordinates_data() {
  
  return coordinates_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CoordinatesBytes::release_coordinates_data() {
  // @@protoc_insertion_point(field_release:CoordinatesBytes.coordinates_data)
  
  return coordinates_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CoordinatesBytes::set_allocated_coordinates_data(std::string* coordinates_data) {
  if (coordinates_data != nullptr) {
    
  } else {
    
  }
  coordinates_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coordinates_data);
  // @@protoc_insertion_point(field_set_allocated:CoordinatesBytes.coordinates_data)
}

// string Laser_type = 2;
inline void CoordinatesBytes::clear_laser_type() {
  laser_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CoordinatesBytes::laser_type() const {
  // @@protoc_insertion_point(field_get:CoordinatesBytes.Laser_type)
  return _internal_laser_type();
}
inline void CoordinatesBytes::set_laser_type(const std::string& value) {
  _internal_set_laser_type(value);
  // @@protoc_insertion_point(field_set:CoordinatesBytes.Laser_type)
}
inline std::string* CoordinatesBytes::mutable_laser_type() {
  // @@protoc_insertion_point(field_mutable:CoordinatesBytes.Laser_type)
  return _internal_mutable_laser_type();
}
inline const std::string& CoordinatesBytes::_internal_laser_type() const {
  return laser_type_.GetNoArena();
}
inline void CoordinatesBytes::_internal_set_laser_type(const std::string& value) {
  
  laser_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CoordinatesBytes::set_laser_type(std::string&& value) {
  
  laser_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CoordinatesBytes.Laser_type)
}
inline void CoordinatesBytes::set_laser_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  laser_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoordinatesBytes.Laser_type)
}
inline void CoordinatesBytes::set_laser_type(const char* value, size_t size) {
  
  laser_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoordinatesBytes.Laser_type)
}
inline std::string* CoordinatesBytes::_internal_mutable_laser_type() {
  
  return laser_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CoordinatesBytes::release_laser_type() {
  // @@protoc_insertion_point(field_release:CoordinatesBytes.Laser_type)
  
  return laser_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CoordinatesBytes::set_allocated_laser_type(std::string* laser_type) {
  if (laser_type != nullptr) {
    
  } else {
    
  }
  laser_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), laser_type);
  // @@protoc_insertion_point(field_set_allocated:CoordinatesBytes.Laser_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_new_5fmessage_2eproto
